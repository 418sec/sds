// koffee 0.56.0

/*
00000000  000  000   000  0000000  
000       000  0000  000  000   000
000000    000  000 0 000  000   000
000       000  000  0000  000   000
000       000  000   000  0000000
 */
var collect, find, regexp;

regexp = require('./regexp');

collect = require('./collect');

find = (function() {
    function find() {}

    find.key = function(object, key) {
        var keyReg;
        keyReg = this.reg(key);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.match(k, keyReg);
            };
        })(this));
    };

    find.path = function(object, path) {
        var pthReg;
        pthReg = this.reg(path);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.matchPath(p, pthReg);
            };
        })(this));
    };

    find.value = function(object, val) {
        var valReg;
        valReg = this.reg(val);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.match(v, valReg);
            };
        })(this));
    };

    find.keyValue = function(object, key, val) {
        var keyReg, valReg;
        keyReg = this.reg(key);
        valReg = this.reg(val);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.match(k, keyReg) && _this.match(v, valReg);
            };
        })(this));
    };

    find.pathValue = function(object, path, val) {
        var pthReg, valReg;
        pthReg = this.reg(path);
        valReg = this.reg(val);
        return this.traverse(object, (function(_this) {
            return function(p, k, v) {
                return _this.matchPath(p, pthReg) && _this.match(v, valReg);
            };
        })(this));
    };

    find.traverse = function(object, func) {
        return collect(object, func, function(p, v) {
            return p;
        });
    };

    find.matchPath = function(a, r) {
        return this.match(a.join('.'), r);
    };

    find.match = function(a, r) {
        var ref;
        if (!(a instanceof Array)) {
            return (ref = String(a).match(r)) != null ? ref.length : void 0;
        } else {
            return false;
        }
    };

    find.reg = function(s) {
        return regexp(s);
    };

    return find;

})();

module.exports = find;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBUUEsTUFBQSxHQUFVLE9BQUEsQ0FBUSxVQUFSOztBQUNWLE9BQUEsR0FBVSxPQUFBLENBQVEsV0FBUjs7QUFFSjs7O0lBS0YsSUFBQyxDQUFBLEdBQUQsR0FBTSxTQUFDLE1BQUQsRUFBUyxHQUFUO0FBQ0YsWUFBQTtRQUFBLE1BQUEsR0FBUyxJQUFDLENBQUEsR0FBRCxDQUFLLEdBQUw7ZUFDVCxJQUFDLENBQUEsUUFBRCxDQUFVLE1BQVYsRUFBa0IsQ0FBQSxTQUFBLEtBQUE7bUJBQUEsU0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUw7dUJBQVcsS0FBQyxDQUFBLEtBQUQsQ0FBTyxDQUFQLEVBQVUsTUFBVjtZQUFYO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQjtJQUZFOztJQUlOLElBQUMsQ0FBQSxJQUFELEdBQU8sU0FBQyxNQUFELEVBQVMsSUFBVDtBQUNILFlBQUE7UUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxJQUFMO2VBQ1QsSUFBQyxDQUFBLFFBQUQsQ0FBVSxNQUFWLEVBQWtCLENBQUEsU0FBQSxLQUFBO21CQUFBLFNBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMO3VCQUFXLEtBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWCxFQUFjLE1BQWQ7WUFBWDtRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEI7SUFGRzs7SUFJUCxJQUFDLENBQUEsS0FBRCxHQUFRLFNBQUMsTUFBRCxFQUFTLEdBQVQ7QUFDSixZQUFBO1FBQUEsTUFBQSxHQUFTLElBQUMsQ0FBQSxHQUFELENBQUssR0FBTDtlQUNULElBQUMsQ0FBQSxRQUFELENBQVUsTUFBVixFQUFrQixDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTDt1QkFBVyxLQUFDLENBQUEsS0FBRCxDQUFPLENBQVAsRUFBVSxNQUFWO1lBQVg7UUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQWxCO0lBRkk7O0lBT1IsSUFBQyxDQUFBLFFBQUQsR0FBVyxTQUFDLE1BQUQsRUFBUyxHQUFULEVBQWMsR0FBZDtBQUNQLFlBQUE7UUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxHQUFMO1FBQ1QsTUFBQSxHQUFTLElBQUMsQ0FBQSxHQUFELENBQUssR0FBTDtlQUNULElBQUMsQ0FBQSxRQUFELENBQVUsTUFBVixFQUFrQixDQUFBLFNBQUEsS0FBQTttQkFBQSxTQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTDt1QkFBVyxLQUFDLENBQUEsS0FBRCxDQUFPLENBQVAsRUFBVSxNQUFWLENBQUEsSUFBc0IsS0FBQyxDQUFBLEtBQUQsQ0FBTyxDQUFQLEVBQVUsTUFBVjtZQUFqQztRQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBbEI7SUFITzs7SUFLWCxJQUFDLENBQUEsU0FBRCxHQUFXLFNBQUMsTUFBRCxFQUFTLElBQVQsRUFBZSxHQUFmO0FBQ1AsWUFBQTtRQUFBLE1BQUEsR0FBUyxJQUFDLENBQUEsR0FBRCxDQUFLLElBQUw7UUFDVCxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUQsQ0FBSyxHQUFMO2VBQ1QsSUFBQyxDQUFBLFFBQUQsQ0FBVSxNQUFWLEVBQWtCLENBQUEsU0FBQSxLQUFBO21CQUFBLFNBQUMsQ0FBRCxFQUFHLENBQUgsRUFBSyxDQUFMO3VCQUFXLEtBQUMsQ0FBQSxTQUFELENBQVcsQ0FBWCxFQUFjLE1BQWQsQ0FBQSxJQUEwQixLQUFDLENBQUEsS0FBRCxDQUFPLENBQVAsRUFBVSxNQUFWO1lBQXJDO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFsQjtJQUhPOztJQUtYLElBQUMsQ0FBQSxRQUFELEdBQVcsU0FBQyxNQUFELEVBQVMsSUFBVDtlQUFrQixPQUFBLENBQVEsTUFBUixFQUFnQixJQUFoQixFQUFzQixTQUFDLENBQUQsRUFBRyxDQUFIO21CQUFTO1FBQVQsQ0FBdEI7SUFBbEI7O0lBUVgsSUFBQyxDQUFBLFNBQUQsR0FBWSxTQUFDLENBQUQsRUFBSSxDQUFKO2VBQVUsSUFBQyxDQUFBLEtBQUQsQ0FBTyxDQUFDLENBQUMsSUFBRixDQUFPLEdBQVAsQ0FBUCxFQUFvQixDQUFwQjtJQUFWOztJQUVaLElBQUMsQ0FBQSxLQUFELEdBQVEsU0FBQyxDQUFELEVBQUcsQ0FBSDtBQUNKLFlBQUE7UUFBQSxJQUFHLENBQUksQ0FBQyxDQUFBLFlBQWEsS0FBZCxDQUFQOzJEQUNzQixDQUFFLGdCQUR4QjtTQUFBLE1BQUE7bUJBR0ksTUFISjs7SUFESTs7SUFNUixJQUFDLENBQUEsR0FBRCxHQUFNLFNBQUMsQ0FBRDtlQUFPLE1BQUEsQ0FBTyxDQUFQO0lBQVA7Ozs7OztBQUVWLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAwMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuMDAwICAgICAgIDAwMCAgMDAwMCAgMDAwICAwMDAgICAwMDBcbjAwMDAwMCAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwXG4wMDAgICAgICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgIDAwMFxuMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICBcbiMjI1xuXG5yZWdleHAgID0gcmVxdWlyZSAnLi9yZWdleHAnXG5jb2xsZWN0ID0gcmVxdWlyZSAnLi9jb2xsZWN0J1xuXG5jbGFzcyBmaW5kXG5cbiAgICAjIGFjY2VwdCBhbiBvYmplY3QgYW5kIGEgKGtleSwgcGF0aCBvciB2YWx1ZSlcbiAgICAjIHJldHVybiBhIGxpc3Qgb2Yga2V5cGF0aHMgZm9yIG1hdGNoaW5nIChrZXksIHBhdGggb3IgdmFsdWUpXG5cbiAgICBAa2V5OiAob2JqZWN0LCBrZXkpIC0+IFxuICAgICAgICBrZXlSZWcgPSBAcmVnIGtleSBcbiAgICAgICAgQHRyYXZlcnNlIG9iamVjdCwgKHAsayx2KSA9PiBAbWF0Y2ggaywga2V5UmVnXG5cbiAgICBAcGF0aDogKG9iamVjdCwgcGF0aCkgLT4gXG4gICAgICAgIHB0aFJlZyA9IEByZWcgcGF0aFxuICAgICAgICBAdHJhdmVyc2Ugb2JqZWN0LCAocCxrLHYpID0+IEBtYXRjaFBhdGggcCwgcHRoUmVnXG5cbiAgICBAdmFsdWU6IChvYmplY3QsIHZhbCkgLT4gXG4gICAgICAgIHZhbFJlZyA9IEByZWcgdmFsICAgICAgICAgXG4gICAgICAgIEB0cmF2ZXJzZSBvYmplY3QsIChwLGssdikgPT4gQG1hdGNoIHYsIHZhbFJlZ1xuXG4gICAgIyBhY2NlcHQgYW4gb2JqZWN0LCBhIChrZXkgb3IgcGF0aCkgYW5kIGEgdmFsdWVcbiAgICAjIHJldHVybiBhIGxpc3Qgb2Yga2V5cGF0aHMgZm9yIG1hdGNoaW5nIChrZXkgb3IgcGF0aCkgYW5kIHZhbHVlIGNvbWJpbmF0aW9uc1xuICAgICAgICBcbiAgICBAa2V5VmFsdWU6IChvYmplY3QsIGtleSwgdmFsKSAtPiBcbiAgICAgICAga2V5UmVnID0gQHJlZyBrZXkgXG4gICAgICAgIHZhbFJlZyA9IEByZWcgdmFsIFxuICAgICAgICBAdHJhdmVyc2Ugb2JqZWN0LCAocCxrLHYpID0+IEBtYXRjaChrLCBrZXlSZWcpIGFuZCBAbWF0Y2godiwgdmFsUmVnKVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgQHBhdGhWYWx1ZToob2JqZWN0LCBwYXRoLCB2YWwpIC0+IFxuICAgICAgICBwdGhSZWcgPSBAcmVnIHBhdGhcbiAgICAgICAgdmFsUmVnID0gQHJlZyB2YWwgICAgICAgICBcbiAgICAgICAgQHRyYXZlcnNlIG9iamVjdCwgKHAsayx2KSA9PiBAbWF0Y2hQYXRoKHAsIHB0aFJlZykgYW5kIEBtYXRjaCh2LCB2YWxSZWcpXG4gICAgICAgIFxuICAgIEB0cmF2ZXJzZTogKG9iamVjdCwgZnVuYykgLT4gY29sbGVjdCBvYmplY3QsIGZ1bmMsIChwLHYpIC0+IHBcbiAgICBcbiAgICAjIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgICAwMDAwMDAwICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDBcbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAwMDAwMDBcbiAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAwMDAwMDAwICAwMDAgICAwMDBcbiAgICBcbiAgICBAbWF0Y2hQYXRoOiAoYSwgcikgLT4gQG1hdGNoIGEuam9pbignLicpLCByXG4gICAgICAgIFxuICAgIEBtYXRjaDogKGEscikgLT5cbiAgICAgICAgaWYgbm90IChhIGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgICAgICBTdHJpbmcoYSkubWF0Y2gocik/Lmxlbmd0aFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmYWxzZVxuXG4gICAgQHJlZzogKHMpIC0+IHJlZ2V4cCBzXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBmaW5kXG4iXX0=
//# sourceURL=../coffee/find.coffee