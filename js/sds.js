// koffee 0.56.0

/*
 0000000  0000000     0000000
000       000   000  000     
0000000   000   000  0000000 
     000  000   000       000
0000000   0000000    0000000
 */
var args, argsFile, colors, data, error, extname, file, find, fs, get, i, j, k, karg, kolor, l, len, len1, len2, noon, o, out, outext, p, path, ref, ref1, ref2, ref3, result, s, set, slash, v,
    indexOf = [].indexOf;

noon = require('noon');

slash = require('path');

fs = require('fs');

karg = require('karg');

find = require('./find');

kolor = require('klor').kolor;

kolor.globalize();

args = karg("sds\n    file        . ? the file to search in           . *   . = package.json\n    key         . ? key to search            \n    value       . ? value to search\n    path        . ? path to search           \n    format      . ? result format\n    set         . ? set values \n    save        . ? write result back to input file . - S . = false \n    output      . ? the file to write or stdout     . - F     \n    json        . ? parse as json                         . = false\n    noon        . ? parse as noon                         . = false\n    yaml                                                  . = false\n    object                                                . = false\n    result                                                . = false\n    colors      . ? output with ansi colors               . = false\n    \nformat\n    @k  key\n    @v  value\n    @o  object\n    @p  path\n        \nshortcuts \n    -o  for -f @o\n    -r  for -f @v and no leading empty line\n\nversion     " + (require(__dirname + "/../package.json").version));

error = function(msg) {
    console.log(("\n" + msg + "\n").red);
    return process.exit();
};

if (args.file == null) {
    if (fs.existsSync('./package.json')) {
        args.file = './package.json';
    } else if (fs.existsSync('./package.noon')) {
        args.file = './package.noon';
    } else {
        console.error('no input file provided!');
    }
} else if (!fs.existsSync(args.file)) {
    argsFile = args.file;
    if ((args.value == null) && (args.key == null) && (args.path == null)) {
        ref = ['./package.json', './package.noon'];
        for (i = 0, len = ref.length; i < len; i++) {
            file = ref[i];
            if (fs.existsSync(file)) {
                args.result = true;
                args.path = argsFile;
                args.file = file;
                break;
            }
        }
    }
    if (argsFile === args.file) {
        console.error("can't find file: " + (bold(yellow(args.file))));
    }
}

colors = args.colors;

extname = args.json ? '.json' : args.noon ? '.noon' : args.yaml ? '.yaml' : slash.extname(args.file);

if (indexOf.call(noon.extnames, extname) < 0) {
    console.error("unknown file type: " + (bold(yellow(extname))) + ". use --json --noon or --yaml to force parsing.");
}

outext = extname;

if (ref1 = args.output, indexOf.call(noon.extnames, ref1) >= 0) {
    outext = args.output;
    delete args.output;
}

data = noon.load(args.file, extname);

if (!((ref2 = data.constructor.name) === 'Array' || ref2 === 'Object')) {
    console.error("no structure in file: " + (bold(yellow(args.file))));
}

if ((args.output != null) || args.save) {
    colors = false;
}

out = function(s) {
    var err, outfile, ref3;
    outfile = (ref3 = args.output) != null ? ref3 : (args.save ? args.file : void 0);
    if (outfile != null) {
        fs.mkdirSync(slash.dirname(outfile), {
            recursive: true
        });
        try {
            return fs.writeFile(outfile, s, 'utf8', function(err) {
                if (err) {
                    return console.error("can't write " + (bold(yellow(outfile))) + ": " + err);
                } else {
                    return console.log(gray("wrote " + (bold(white(outfile)))));
                }
            });
        } catch (error1) {
            err = error1;
            return console.error("can't write " + (bold(yellow(outfile))) + ": " + err);
        }
    } else {
        return console.log(s);
    }
};

if (args.set != null) {
    set = require('./set');
    ref3 = noon.parse(args.set);
    for (p in ref3) {
        v = ref3[p];
        set(data, p, v);
    }
    out(noon.stringify(data, {
        colors: colors,
        ext: outext
    }));
} else if ((args.key == null) && (args.value == null) && (args.path == null)) {
    s = noon.stringify(data, {
        colors: colors,
        ext: outext
    });
    out('\n' + s + '\n');
} else {
    get = require('./get');
    if (!args.result) {
        console.log('');
    }
    result = (args.path != null) && (args.value != null) ? find.pathValue(data, args.path, args.value) : args.path != null ? find.path(data, args.path) : (args.key != null) && (args.value != null) ? find.keyValue(data, args.key, args.value) : args.key != null ? find.key(data, args.key) : find.value(data, args.value);
    if (args.object || args.result || args.format) {
        for (j = 0, len1 = result.length; j < len1; j++) {
            path = result[j];
            p = path.join('.');
            k = path[path.length - 1];
            v = get(data, path);
            if (args.object) {
                path.pop();
                s = noon.stringify(get(data, path), {
                    colors: colors
                });
            } else if (args.result) {
                s = noon.stringify(v, {
                    colors: colors
                });
            } else if (args.format) {
                s = args.format;
                s = s.replace('@k', k);
                s = s.replace('@p', p);
                s = s.replace('@v', noon.stringify(v, {
                    colors: colors
                }));
                if (args.format.indexOf('@o') >= 0) {
                    path.pop();
                    if (path.length) {
                        o = noon.stringify(get(data, path), {
                            colors: colors
                        });
                    } else {
                        o = noon.stringify(data, {
                            colors: colors
                        });
                    }
                    s = s.replace('@o', o);
                }
            } else {
                o = {};
                o[p] = v;
                s = noon.stringify(o, {
                    colors: colors
                });
            }
            out(s);
        }
    } else {
        o = {};
        for (l = 0, len2 = result.length; l < len2; l++) {
            path = result[l];
            o[path.join('.')] = get(data, path);
        }
        s = noon.stringify(o, {
            colors: colors
        });
        out(s);
    }
    if (!args.result) {
        out('');
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RzLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSwyTEFBQTtJQUFBOztBQVVBLElBQUEsR0FBUyxPQUFBLENBQVEsTUFBUjs7QUFDVCxLQUFBLEdBQVMsT0FBQSxDQUFRLE1BQVI7O0FBQ1QsRUFBQSxHQUFTLE9BQUEsQ0FBUSxJQUFSOztBQUNULElBQUEsR0FBUyxPQUFBLENBQVEsTUFBUjs7QUFDVCxJQUFBLEdBQVMsT0FBQSxDQUFRLFFBQVI7O0FBQ1QsS0FBQSxHQUFTLE9BQUEsQ0FBUSxNQUFSLENBQWUsQ0FBQzs7QUFDekIsS0FBSyxDQUFDLFNBQU4sQ0FBQTs7QUFRQSxJQUFBLEdBQU8sSUFBQSxDQUFLLDArQkFBQSxHQTJCQyxDQUFDLE9BQUEsQ0FBVyxTQUFELEdBQVcsa0JBQXJCLENBQXVDLENBQUMsT0FBekMsQ0EzQk47O0FBb0NQLEtBQUEsR0FBUSxTQUFDLEdBQUQ7SUFDTCxPQUFBLENBQUMsR0FBRCxDQUFLLENBQUMsSUFBQSxHQUFLLEdBQUwsR0FBUyxJQUFWLENBQWUsQ0FBQyxHQUFyQjtXQUNDLE9BQU8sQ0FBQyxJQUFSLENBQUE7QUFGSTs7QUFJUixJQUFPLGlCQUFQO0lBQ0ksSUFBRyxFQUFFLENBQUMsVUFBSCxDQUFjLGdCQUFkLENBQUg7UUFDSSxJQUFJLENBQUMsSUFBTCxHQUFZLGlCQURoQjtLQUFBLE1BRUssSUFBRyxFQUFFLENBQUMsVUFBSCxDQUFjLGdCQUFkLENBQUg7UUFDRCxJQUFJLENBQUMsSUFBTCxHQUFZLGlCQURYO0tBQUEsTUFBQTtRQUdGLE9BQUEsQ0FBQyxLQUFELENBQU8seUJBQVAsRUFIRTtLQUhUO0NBQUEsTUFPSyxJQUFHLENBQUksRUFBRSxDQUFDLFVBQUgsQ0FBYyxJQUFJLENBQUMsSUFBbkIsQ0FBUDtJQUNELFFBQUEsR0FBVyxJQUFJLENBQUM7SUFDaEIsSUFBSSxvQkFBRCxJQUFrQixrQkFBbEIsSUFB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QUFJLENBQUMsU0FBTCxDQUFlLEdBQUEsQ0FBSSxJQUFKLEVBQVUsSUFBVixDQUFmLEVBQWdDOzRCQUFBLE1BQUEsRUFBTyxNQUFQO3lCQUFoQyxFQURSO3FCQUFBLE1BQUE7d0JBR0ksQ0FBQSxHQUFJLElBQUksQ0FBQyxTQUFMLENBQWUsSUFBZixFQUFxQjs0QkFBQSxNQUFBLEVBQU8sTUFBUDt5QkFBckIsRUFIUjs7b0JBSUEsQ0FBQSxHQUFJLENBQUMsQ0FBQyxPQUFGLENBQVUsSUFBVixFQUFnQixDQUFoQixFQU5SO2lCQUxDO2FBQUEsTUFBQTtnQkFhRCxDQUFBLEdBQUk7Z0JBQ0osQ0FBRSxDQUFBLENBQUEsQ0FBRixHQUFPO2dCQUNQLENBQUEsR0FBSSxJQUFJLENBQUMsU0FBTCxDQUFlLENBQWYsRUFBa0I7b0JBQUEsTUFBQSxFQUFPLE1BQVA7aUJBQWxCLEVBZkg7O1lBZ0JMLEdBQUEsQ0FBSSxDQUFKO0FBMUJKLFNBREo7S0FBQSxNQUFBO1FBNkJJLENBQUEsR0FBSTtBQUNKLGFBQUEsMENBQUE7O1lBQ0ksQ0FBRSxDQUFBLElBQUksQ0FBQyxJQUFMLENBQVUsR0FBVixDQUFBLENBQUYsR0FBb0IsR0FBQSxDQUFJLElBQUosRUFBVSxJQUFWO0FBRHhCO1FBRUEsQ0FBQSxHQUFJLElBQUksQ0FBQyxTQUFMLENBQWUsQ0FBZixFQUFrQjtZQUFBLE1BQUEsRUFBTyxNQUFQO1NBQWxCO1FBQ0osR0FBQSxDQUFJLENBQUosRUFqQ0o7O0lBbUNBLElBQUcsQ0FBSSxJQUFJLENBQUMsTUFBWjtRQUNJLEdBQUEsQ0FBSSxFQUFKLEVBREo7S0F2RUMiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAwMDAwMDAwICAgICAwMDAwMDAwXG4wMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAgIFxuMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCBcbiAgICAgMDAwICAwMDAgICAwMDAgICAgICAgMDAwXG4wMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwIFxuIyMjXG5cbiMg4pa4c3RhcnQgJ3Nkcydcblxubm9vbiAgID0gcmVxdWlyZSAnbm9vbidcbnNsYXNoICA9IHJlcXVpcmUgJ3BhdGgnXG5mcyAgICAgPSByZXF1aXJlICdmcydcbmthcmcgICA9IHJlcXVpcmUgJ2thcmcnXG5maW5kICAgPSByZXF1aXJlICcuL2ZpbmQnXG5rb2xvciAgPSByZXF1aXJlKCdrbG9yJykua29sb3JcbmtvbG9yLmdsb2JhbGl6ZSgpXG5cbiMgIDAwMDAwMDAgICAwMDAwMDAwMCAgICAwMDAwMDAwICAgIDAwMDAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgICBcbiMgMDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgMDAwMCAgMDAwMDAwMCBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCBcblxuYXJncyA9IGthcmcgXCJcIlwiXG5zZHNcbiAgICBmaWxlICAgICAgICAuID8gdGhlIGZpbGUgdG8gc2VhcmNoIGluICAgICAgICAgICAuICogICAuID0gcGFja2FnZS5qc29uXG4gICAga2V5ICAgICAgICAgLiA/IGtleSB0byBzZWFyY2ggICAgICAgICAgICBcbiAgICB2YWx1ZSAgICAgICAuID8gdmFsdWUgdG8gc2VhcmNoXG4gICAgcGF0aCAgICAgICAgLiA/IHBhdGggdG8gc2VhcmNoICAgICAgICAgICBcbiAgICBmb3JtYXQgICAgICAuID8gcmVzdWx0IGZvcm1hdFxuICAgIHNldCAgICAgICAgIC4gPyBzZXQgdmFsdWVzIFxuICAgIHNhdmUgICAgICAgIC4gPyB3cml0ZSByZXN1bHQgYmFjayB0byBpbnB1dCBmaWxlIC4gLSBTIC4gPSBmYWxzZSBcbiAgICBvdXRwdXQgICAgICAuID8gdGhlIGZpbGUgdG8gd3JpdGUgb3Igc3Rkb3V0ICAgICAuIC0gRiAgICAgXG4gICAganNvbiAgICAgICAgLiA/IHBhcnNlIGFzIGpzb24gICAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgbm9vbiAgICAgICAgLiA/IHBhcnNlIGFzIG5vb24gICAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgeWFtbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgb2JqZWN0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgcmVzdWx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgY29sb3JzICAgICAgLiA/IG91dHB1dCB3aXRoIGFuc2kgY29sb3JzICAgICAgICAgICAgICAgLiA9IGZhbHNlXG4gICAgXG5mb3JtYXRcbiAgICBAayAga2V5XG4gICAgQHYgIHZhbHVlXG4gICAgQG8gIG9iamVjdFxuICAgIEBwICBwYXRoXG4gICAgICAgIFxuc2hvcnRjdXRzIFxuICAgIC1vICBmb3IgLWYgQG9cbiAgICAtciAgZm9yIC1mIEB2IGFuZCBubyBsZWFkaW5nIGVtcHR5IGxpbmVcblxudmVyc2lvbiAgICAgI3tyZXF1aXJlKFwiI3tfX2Rpcm5hbWV9Ly4uL3BhY2thZ2UuanNvblwiKS52ZXJzaW9ufVxuXCJcIlwiXG5cbiMgMDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwIFxuIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwXG4jIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICBcbiMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwXG5cbmVycm9yID0gKG1zZykgLT5cbiAgICBsb2cgKFwiXFxuXCIrbXNnK1wiXFxuXCIpLnJlZFxuICAgIHByb2Nlc3MuZXhpdCgpXG5cbmlmIG5vdCBhcmdzLmZpbGU/XG4gICAgaWYgZnMuZXhpc3RzU3luYyAnLi9wYWNrYWdlLmpzb24nXG4gICAgICAgIGFyZ3MuZmlsZSA9ICcuL3BhY2thZ2UuanNvbidcbiAgICBlbHNlIGlmIGZzLmV4aXN0c1N5bmMgJy4vcGFja2FnZS5ub29uJ1xuICAgICAgICBhcmdzLmZpbGUgPSAnLi9wYWNrYWdlLm5vb24nXG4gICAgZWxzZVxuICAgICAgICBlcnJvciAnbm8gaW5wdXQgZmlsZSBwcm92aWRlZCEnXG5lbHNlIGlmIG5vdCBmcy5leGlzdHNTeW5jIGFyZ3MuZmlsZVxuICAgIGFyZ3NGaWxlID0gYXJncy5maWxlXG4gICAgaWYgIWFyZ3MudmFsdWU/IGFuZCAhYXJncy5rZXk/IGFuZCAhYXJncy5wYXRoPyAgICBcbiAgICAgICAgZm9yIGZpbGUgaW4gWycuL3BhY2thZ2UuanNvbicsICcuL3BhY2thZ2Uubm9vbiddXG4gICAgICAgICAgICBpZiBmcy5leGlzdHNTeW5jIGZpbGVcbiAgICAgICAgICAgICAgICBhcmdzLnJlc3VsdCA9IHRydWVcbiAgICAgICAgICAgICAgICBhcmdzLnBhdGggICA9IGFyZ3NGaWxlXG4gICAgICAgICAgICAgICAgYXJncy5maWxlICAgPSBmaWxlXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICBpZiBhcmdzRmlsZSA9PSBhcmdzLmZpbGVcbiAgICAgICAgZXJyb3IgXCJjYW4ndCBmaW5kIGZpbGU6ICN7Ym9sZCB5ZWxsb3cgYXJncy5maWxlfVwiXG5cbmNvbG9ycyA9IGFyZ3MuY29sb3JzXG5cbiMgMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAgICAgIDAwICAwMDAwMDAwMFxuIyAwMDAgICAgICAgIDAwMCAwMDAgICAgICAwMDAgICAgIDAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgXG4jIDAwMDAwMDAgICAgIDAwMDAwICAgICAgIDAwMCAgICAgMDAwIDAgMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMCBcbiMgMDAwICAgICAgICAwMDAgMDAwICAgICAgMDAwICAgICAwMDAgIDAwMDAgIDAwMCAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAgIFxuIyAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwXG5cbmV4dG5hbWUgPSAgICAgXG4gICAgaWYgICAgICBhcmdzLmpzb24gdGhlbiAnLmpzb24nXG4gICAgZWxzZSBpZiBhcmdzLm5vb24gdGhlbiAnLm5vb24nXG4gICAgZWxzZSBpZiBhcmdzLnlhbWwgdGhlbiAnLnlhbWwnXG4gICAgZWxzZVxuICAgICAgICBzbGFzaC5leHRuYW1lIGFyZ3MuZmlsZVxuICAgIFxuaWYgZXh0bmFtZSBub3QgaW4gbm9vbi5leHRuYW1lc1xuICAgIGVycm9yIFwidW5rbm93biBmaWxlIHR5cGU6ICN7Ym9sZCB5ZWxsb3cgZXh0bmFtZX0uIHVzZSAtLWpzb24gLS1ub29uIG9yIC0teWFtbCB0byBmb3JjZSBwYXJzaW5nLlwiXG5cbm91dGV4dCA9IGV4dG5hbWVcbmlmIGFyZ3Mub3V0cHV0IGluIG5vb24uZXh0bmFtZXNcbiAgICBvdXRleHQgPSBhcmdzLm91dHB1dFxuICAgIGRlbGV0ZSBhcmdzLm91dHB1dFxuXG4jIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICBcbiMgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMFxuIyAwMDAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwXG4jIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDBcbiMgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuXG5kYXRhID0gbm9vbi5sb2FkIGFyZ3MuZmlsZSwgZXh0bmFtZVxuXG5pZiBub3QgKGRhdGEuY29uc3RydWN0b3IubmFtZSBpbiBbJ0FycmF5JywgJ09iamVjdCddKVxuICAgIGVycm9yIFwibm8gc3RydWN0dXJlIGluIGZpbGU6ICN7Ym9sZCB5ZWxsb3cgYXJncy5maWxlfVwiXG5cbiMgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwMFxuIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgIFxuIyAgMDAwMDAwMCAgICAwMDAwMDAwICAgICAgMDAwICAgXG5cbmNvbG9ycyA9IGZhbHNlIGlmIGFyZ3Mub3V0cHV0PyBvciBhcmdzLnNhdmVcblxub3V0ID0gKHMpIC0+XG4gICAgXG4gICAgb3V0ZmlsZSA9IGFyZ3Mub3V0cHV0ID8gKGFyZ3MuZmlsZSBpZiBhcmdzLnNhdmUpXG4gICAgXG4gICAgaWYgb3V0ZmlsZT9cbiAgICAgICAgZnMubWtkaXJTeW5jIHNsYXNoLmRpcm5hbWUob3V0ZmlsZSksIHJlY3Vyc2l2ZTp0cnVlXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgZnMud3JpdGVGaWxlIG91dGZpbGUsIHMsICd1dGY4JywgKGVycikgLT5cbiAgICAgICAgICAgICAgICBpZiBlcnJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgXCJjYW4ndCB3cml0ZSAje2JvbGQgeWVsbG93IG91dGZpbGV9OiAje2Vycn1cIlxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbG9nIGdyYXkgXCJ3cm90ZSAje2JvbGQgd2hpdGUgb3V0ZmlsZX1cIlxuICAgICAgICBjYXRjaCBlcnJcbiAgICAgICAgICAgIGVycm9yIFwiY2FuJ3Qgd3JpdGUgI3tib2xkIHllbGxvdyBvdXRmaWxlfTogI3tlcnJ9XCJcbiAgICBlbHNlXG4gICAgICAgIGxvZyBzXG5cbmlmIGFyZ3Muc2V0P1xuICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAwMDAwICAgMDAwMDAwMCAgICAgIDAwMCAgIFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMCAgICAgMDAwICAgXG4gICAgXG4gICAgc2V0ID0gcmVxdWlyZSAnLi9zZXQnXG4gICAgXG4gICAgZm9yIHAsdiBvZiBub29uLnBhcnNlIGFyZ3Muc2V0XG4gICAgICAgIHNldCBkYXRhLCBwLCB2XG4gICAgICAgIFxuICAgIG91dCBub29uLnN0cmluZ2lmeSBkYXRhLCBjb2xvcnM6Y29sb3JzLCBleHQ6b3V0ZXh0XG4gICAgICAgIFxuZWxzZSBpZiBub3QgYXJncy5rZXk/IGFuZCBub3QgYXJncy52YWx1ZT8gYW5kIG5vdCBhcmdzLnBhdGg/XG5cbiAgICAjIDAwMCAgICAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMFxuICAgICMgMDAwICAgICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgXG4gICAgIyAwMDAgICAgICAwMDAgIDAwMDAwMDAgICAgICAwMDAgICBcbiAgICAjIDAwMCAgICAgIDAwMCAgICAgICAwMDAgICAgIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAgICAgMDAwICAgXG4gICAgXG4gICAgcyA9IG5vb24uc3RyaW5naWZ5IGRhdGEsIGNvbG9yczpjb2xvcnMsIGV4dDpvdXRleHRcbiAgICBvdXQgJ1xcbicrcysnXFxuJ1xuICAgIFxuZWxzZSAgICAgIFxuICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAgICAgMDAwICAgICAgIDAwMDAwMDAwMFxuICAgICMgICAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgICAgXG4gICAgZ2V0ID0gcmVxdWlyZSAnLi9nZXQnXG4gICAgICBcbiAgICBpZiBub3QgYXJncy5yZXN1bHRcbiAgICAgICAgbG9nICcnXG4gICAgICAgIFxuICAgIHJlc3VsdCA9IFxuICAgICAgICBpZiBhcmdzLnBhdGg/IGFuZCBhcmdzLnZhbHVlP1xuICAgICAgICAgICAgZmluZC5wYXRoVmFsdWUgZGF0YSwgYXJncy5wYXRoLCBhcmdzLnZhbHVlXG4gICAgICAgIGVsc2UgaWYgYXJncy5wYXRoP1xuICAgICAgICAgICAgZmluZC5wYXRoIGRhdGEsIGFyZ3MucGF0aFxuICAgICAgICBlbHNlIGlmIGFyZ3Mua2V5PyBhbmQgYXJncy52YWx1ZT9cbiAgICAgICAgICAgIGZpbmQua2V5VmFsdWUgZGF0YSwgYXJncy5rZXksIGFyZ3MudmFsdWVcbiAgICAgICAgZWxzZSBpZiBhcmdzLmtleT9cbiAgICAgICAgICAgIGZpbmQua2V5IGRhdGEsIGFyZ3Mua2V5XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpbmQudmFsdWUgZGF0YSwgYXJncy52YWx1ZVxuICAgICAgICAgICAgICAgICAgICBcbiAgICBpZiBhcmdzLm9iamVjdCBvciBhcmdzLnJlc3VsdCBvciBhcmdzLmZvcm1hdFxuICAgICAgICBmb3IgcGF0aCBpbiByZXN1bHRcbiAgICAgICAgICAgIHAgPSBwYXRoLmpvaW4gJy4nXG4gICAgICAgICAgICBrID0gcGF0aFtwYXRoLmxlbmd0aC0xXVxuICAgICAgICAgICAgdiA9IGdldCBkYXRhLCBwYXRoXG5cbiAgICAgICAgICAgIGlmIGFyZ3Mub2JqZWN0XG4gICAgICAgICAgICAgICAgcGF0aC5wb3AoKVxuICAgICAgICAgICAgICAgIHMgPSBub29uLnN0cmluZ2lmeSBnZXQoZGF0YSwgcGF0aCksIGNvbG9yczpjb2xvcnNcbiAgICAgICAgICAgIGVsc2UgaWYgYXJncy5yZXN1bHRcbiAgICAgICAgICAgICAgICBzID0gbm9vbi5zdHJpbmdpZnkgdiwgY29sb3JzOiBjb2xvcnNcbiAgICAgICAgICAgIGVsc2UgaWYgYXJncy5mb3JtYXRcbiAgICAgICAgICAgICAgICBzID0gYXJncy5mb3JtYXRcbiAgICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlICdAaycsIGtcbiAgICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlICdAcCcsIHBcbiAgICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlICdAdicsIG5vb24uc3RyaW5naWZ5IHYsIGNvbG9yczpjb2xvcnNcbiAgICAgICAgICAgICAgICBpZiBhcmdzLmZvcm1hdC5pbmRleE9mKCdAbycpID49IDBcbiAgICAgICAgICAgICAgICAgICAgcGF0aC5wb3AoKVxuICAgICAgICAgICAgICAgICAgICBpZiBwYXRoLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG5vb24uc3RyaW5naWZ5IGdldChkYXRhLCBwYXRoKSwgY29sb3JzOmNvbG9yc1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gbm9vbi5zdHJpbmdpZnkgZGF0YSwgY29sb3JzOmNvbG9yc1xuICAgICAgICAgICAgICAgICAgICBzID0gcy5yZXBsYWNlICdAbycsIG9cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvID0ge31cbiAgICAgICAgICAgICAgICBvW3BdID0gdlxuICAgICAgICAgICAgICAgIHMgPSBub29uLnN0cmluZ2lmeSBvLCBjb2xvcnM6Y29sb3JzXG4gICAgICAgICAgICBvdXQgc1xuICAgIGVsc2VcbiAgICAgICAgbyA9IHt9XG4gICAgICAgIGZvciBwYXRoIGluIHJlc3VsdFxuICAgICAgICAgICAgb1twYXRoLmpvaW4oJy4nKV0gPSBnZXQgZGF0YSwgcGF0aFxuICAgICAgICBzID0gbm9vbi5zdHJpbmdpZnkgbywgY29sb3JzOmNvbG9yc1xuICAgICAgICBvdXQgc1xuICAgICAgICBcbiAgICBpZiBub3QgYXJncy5yZXN1bHRcbiAgICAgICAgb3V0ICcnXG5cbiMg4pa4ZW5kICdzZHMnXG4iXX0=
//# sourceURL=../coffee/sds.coffee